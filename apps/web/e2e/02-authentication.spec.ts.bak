import { test, expect } from '@playwright/test';

/**
 * Authentication Flow Tests
 *
 * Tests login, signup, and authentication redirects
 */

test.describe('Authentication', () => {
  test.describe('Login Page', () => {
    test('should load login page', async ({ page }) => {
      await page.goto('/login');

      await expect(page).toHaveURL(/\/login\/?/);
      await expect(page).toHaveTitle(/Login|Vapour Toolbox/);
    });

    test.skip('should show login form elements', async ({ page }) => {
      await page.goto('/login');

      // Check for email and password inputs
      const emailInput = page.locator('input[type="email"], input[name="email"]');
      const passwordInput = page.locator(
        'input[type="password"], input[name="password"]'
      );

      await expect(emailInput).toBeVisible();
      await expect(passwordInput).toBeVisible();

      // Check for login button
      const loginButton = page.locator('button:has-text("Sign in"), button:has-text("Login")');
      await expect(loginButton).toBeVisible();
    });

    test.skip('should show validation error for empty email', async ({ page }) => {
      await page.goto('/login');

      // Try to submit with empty email
      const loginButton = page.locator('button:has-text("Sign in"), button:has-text("Login")').first();
      await loginButton.click();

      // Should show validation error or prevent submission
      // This depends on your validation implementation
      const emailInput = page.locator('input[type="email"], input[name="email"]').first();
      const isInvalid = await emailInput.evaluate((el: HTMLInputElement) => !el.validity.valid);

      expect(isInvalid).toBe(true);
    });

    test('should navigate to signup page', async ({ page }) => {
      await page.goto('/login');

      // Look for signup link
      const signupLink = page.locator('a:has-text("Sign up"), a[href*="signup"]');

      if ((await signupLink.count()) > 0) {
        await signupLink.first().click();
        await expect(page).toHaveURL(/signup/);
      }
    });
  });

  test.describe('Signup Page', () => {
    test('should load signup page', async ({ page }) => {
      await page.goto('/signup');

      await expect(page).toHaveURL(/\/signup\/?/);
    });

    test.skip('should show signup form elements', async ({ page }) => {
      await page.goto('/signup');

      // Check for name, email, and password inputs
      const emailInput = page.locator('input[type="email"], input[name="email"]');
      const passwordInput = page.locator('input[type="password"]');

      await expect(emailInput).toBeVisible();
      await expect(passwordInput.first()).toBeVisible();
    });
  });

  test.describe('Protected Routes', () => {
    test.skip('should redirect to login when not authenticated', async ({ page }) => {
      // Try to access protected dashboard
      await page.goto('/dashboard');

      // Should redirect to login
      await page.waitForURL(/login/, { timeout: 5000 });
      await expect(page).toHaveURL(/login\/?/);
    });

    test('should redirect entities page to login', async ({ page }) => {
      await page.goto('/entities');

      // Should redirect to login
      await page.waitForURL(/login/, { timeout: 5000 });
      await expect(page).toHaveURL(/login/);
    });
  });
});
