/**
 * Permission Calculation Utilities
 * Maps user roles to bitwise permission flags
 */

import { UserRole } from '../types/user';
import { PERMISSION_FLAGS } from '../constants/permissions';

/**
 * Role-to-permissions mapping
 * Defines which permissions each role should have
 */
const ROLE_PERMISSIONS: Record<UserRole, number[]> = {
  SUPER_ADMIN: [
    // All permissions
    PERMISSION_FLAGS.MANAGE_USERS,
    PERMISSION_FLAGS.VIEW_USERS,
    PERMISSION_FLAGS.MANAGE_ROLES,
    PERMISSION_FLAGS.MANAGE_PROJECTS,
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.MANAGE_ENTITIES,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.MANAGE_COMPANY_SETTINGS,
    PERMISSION_FLAGS.VIEW_ANALYTICS,
    PERMISSION_FLAGS.EXPORT_DATA,
    PERMISSION_FLAGS.MANAGE_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
    PERMISSION_FLAGS.MANAGE_ACCOUNTING,
    PERMISSION_FLAGS.VIEW_ACCOUNTING,
    PERMISSION_FLAGS.MANAGE_PROCUREMENT,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
    PERMISSION_FLAGS.MANAGE_ESTIMATION,
    PERMISSION_FLAGS.VIEW_ESTIMATION,
  ],

  DIRECTOR: [
    PERMISSION_FLAGS.MANAGE_USERS,
    PERMISSION_FLAGS.VIEW_USERS,
    PERMISSION_FLAGS.MANAGE_PROJECTS,
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.MANAGE_ENTITIES,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.VIEW_ANALYTICS,
    PERMISSION_FLAGS.EXPORT_DATA,
    PERMISSION_FLAGS.MANAGE_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
    PERMISSION_FLAGS.MANAGE_ACCOUNTING,
    PERMISSION_FLAGS.VIEW_ACCOUNTING,
    PERMISSION_FLAGS.MANAGE_PROCUREMENT,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
    PERMISSION_FLAGS.MANAGE_ESTIMATION,
    PERMISSION_FLAGS.VIEW_ESTIMATION,
  ],

  HR_ADMIN: [
    PERMISSION_FLAGS.MANAGE_USERS,
    PERMISSION_FLAGS.VIEW_USERS,
    PERMISSION_FLAGS.MANAGE_ROLES,
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.VIEW_ANALYTICS,
    PERMISSION_FLAGS.MANAGE_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
  ],

  FINANCE_MANAGER: [
    PERMISSION_FLAGS.VIEW_USERS,
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.VIEW_ANALYTICS,
    PERMISSION_FLAGS.EXPORT_DATA,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
    PERMISSION_FLAGS.MANAGE_ACCOUNTING,
    PERMISSION_FLAGS.VIEW_ACCOUNTING,
    PERMISSION_FLAGS.MANAGE_PROCUREMENT,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
  ],

  ACCOUNTANT: [
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.VIEW_ANALYTICS,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
    PERMISSION_FLAGS.MANAGE_ACCOUNTING,
    PERMISSION_FLAGS.VIEW_ACCOUNTING,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
  ],

  PROJECT_MANAGER: [
    PERMISSION_FLAGS.VIEW_USERS,
    PERMISSION_FLAGS.MANAGE_PROJECTS,
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.VIEW_ANALYTICS,
    PERMISSION_FLAGS.EXPORT_DATA,
    PERMISSION_FLAGS.MANAGE_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_ACCOUNTING,
    PERMISSION_FLAGS.MANAGE_PROCUREMENT,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
    PERMISSION_FLAGS.MANAGE_ESTIMATION,
    PERMISSION_FLAGS.VIEW_ESTIMATION,
  ],

  ENGINEERING_HEAD: [
    PERMISSION_FLAGS.VIEW_USERS,
    PERMISSION_FLAGS.MANAGE_PROJECTS,
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.VIEW_ANALYTICS,
    PERMISSION_FLAGS.MANAGE_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
    PERMISSION_FLAGS.MANAGE_ESTIMATION,
    PERMISSION_FLAGS.VIEW_ESTIMATION,
  ],

  ENGINEER: [
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.MANAGE_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
    PERMISSION_FLAGS.MANAGE_ESTIMATION,
    PERMISSION_FLAGS.VIEW_ESTIMATION,
  ],

  PROCUREMENT_MANAGER: [
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.MANAGE_ENTITIES,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.MANAGE_PROCUREMENT,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
    PERMISSION_FLAGS.VIEW_ESTIMATION,
  ],

  SITE_ENGINEER: [
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.MANAGE_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
  ],

  TEAM_MEMBER: [
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.VIEW_ENTITIES,
    PERMISSION_FLAGS.MANAGE_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
  ],

  CLIENT_PM: [
    // External client project managers - view-only for assigned projects
    PERMISSION_FLAGS.VIEW_PROJECTS,
    PERMISSION_FLAGS.VIEW_TIME_TRACKING,
    PERMISSION_FLAGS.VIEW_PROCUREMENT,
  ],
};

/**
 * Calculate total permissions for a set of roles
 * Uses bitwise OR to combine all permissions
 *
 * @param roles - Array of user roles
 * @returns Combined permission value (bitwise OR of all role permissions)
 */
export function calculatePermissions(roles: UserRole[]): number {
  if (!roles || roles.length === 0) {
    return 0;
  }

  let permissions = 0;

  for (const role of roles) {
    const rolePerms = ROLE_PERMISSIONS[role];
    if (rolePerms) {
      // Bitwise OR each permission flag
      for (const perm of rolePerms) {
        permissions |= perm;
      }
    }
  }

  return permissions;
}

/**
 * Check if a permission value includes a specific permission
 *
 * @param userPermissions - User's total permissions (bitwise combined)
 * @param requiredPermission - Permission flag to check
 * @returns true if user has the permission
 */
export function hasPermission(userPermissions: number, requiredPermission: number): boolean {
  return (userPermissions & requiredPermission) === requiredPermission;
}

/**
 * Get all individual permissions from a combined permission value
 *
 * @param permissions - Combined permission value
 * @returns Array of individual permission flags
 */
export function getIndividualPermissions(permissions: number): number[] {
  const result: number[] = [];

  // Check each possible permission bit (0-31)
  for (let bit = 0; bit < 32; bit++) {
    const flag = 1 << bit;
    if ((permissions & flag) === flag) {
      result.push(flag);
    }
  }

  return result;
}
